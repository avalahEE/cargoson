{
  "openapi": "3.0.1",
  "info": {
    "title": "Cargoson API v1",
    "version": "v1",
    "description": "Cargoson API can be used to exchange shipment information with Cargoson via REST API.\n\nCargoson API uses API keys to authenticate requests. You can request an API key by writing to us at support@cargoson.com.\n    \nAll API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.\n",
    "contact": {
      "name": "Cargoson",
      "email": "support@cargoson.com",
      "url": "https://www.cargoson.com"
    }
  },
  "paths": {
    "/queries": {
      "post": {
        "summary": "Create a query or booking",
        "operationId": "createQuery",
        "description": "This endpoint is used to create a new query in Cargoson. \n\nIf a ```direct_booking_service_id``` is provided, a booking will be created as well.  ```parcel_machine_reference``` can be also be provided alongside the service id, if it is a parcel machine service. \n\nIf ```automated_booking``` option is provided, the service will be automatically chosen based on user-defined rules and a booking will be created.\n",
        "tags": [
          "Shipments"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json",
              "enum": [
                "application/json"
              ]
            },
            "required": true,
            "description": "The API can read JSON messages. The value should be application/json"
          },
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.api.v1",
              "enum": [
                "application/vnd.api.v1"
              ]
            },
            "description": "This header is for defining the API version. The value should be application/vnd.api.v1",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Query created, and the created query is found in the response body. \n\nYou can find the label and tracking URLs in the elements ```label_url``` and ```tracking_url```, respectively. When visiting these URLs the user will not see any content until the shipment is booked in Cargoson.\n",
            "content": {}
          },
          "422": {
            "description": "Couldn't (fully) complete request due to some issue in the input data. You can find the error messages in the ```errors``` array.\n\nIf you included the option to immediately book the shipment to a specific carrier's service (options/direct_booking_service_id), it is possible that the shipment was created but it couldn't be booked to the requested service. When this happens, you will see the created query elements, along with a ```\"query_status\": \"created\"``` and a ```\"booking_status\": \"failed\"```. The error messages will be included in the ```errors``` array.\n",
            "content": {}
          },
          "403": {
            "description": "The API key does not have enough privileges to complete this operation.",
            "content": {}
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              },
              "examples": {
                "MinimumQuery": {
                  "value": {
                    "collection_date": "2023-08-29",
                    "collection_postcode": "12345",
                    "collection_country": "EE",
                    "delivery_postcode": "54321",
                    "delivery_country": "LV",
                    "rows_attributes": [
                      {
                        "quantity": 1,
                        "package_type": "EUR",
                        "weight": 100,
                        "description": "Goods on EUR pallet"
                      }
                    ]
                  }
                },
                "MinimumBooking": {
                  "value": {
                    "collection_date": "2023-08-29",
                    "collection_country": "EE",
                    "collection_postcode": "12345",
                    "collection_address_row_1": "Kuldnoka 4",
                    "collection_city": "Tallinn",
                    "collection_company_name": "Demo OÜ",
                    "collection_contact_name": "Peeter Kurvits",
                    "collection_contact_phone": "+37255551234",
                    "delivery_country": "LV",
                    "delivery_postcode": "54321",
                    "delivery_address_row_1": "Kuldnoka 5",
                    "delivery_city": "Riga",
                    "delivery_company_name": "Demo Latvia OÜ",
                    "delivery_contact_name": "Johannes Kurvits",
                    "delivery_contact_phone": "+37212345555",
                    "rows_attributes": [
                      {
                        "quantity": 1,
                        "package_type": "EUR",
                        "weight": 100,
                        "description": "Goods on EUR pallet"
                      }
                    ],
                    "options": {
                      "direct_booking_service_id": 1234
                    }
                  }
                },
                "FullBooking": {
                  "value": {
                    "customer_reference": "test-customer-ref-123",
                    "collection_date": "2023-08-29",
                    "collection_time_from": "15:00",
                    "collection_time_to": "19:00",
                    "collection_country": "EE",
                    "collection_postcode": "12345",
                    "collection_address_row_1": "Kuldnoka 4",
                    "collection_address_row_2": "Harjumaa",
                    "collection_city": "Tallinn",
                    "collection_company_name": "Demo OÜ",
                    "collection_contact_name": "Peeter Kurvits",
                    "collection_contact_email": "hello@cargoson.com",
                    "collection_contact_phone": "+37255551234",
                    "collection_comment": "Collection comment example",
                    "collection_with_tail_lift": true,
                    "collection_prenotification": true,
                    "delivery_date": "2023-09-15",
                    "delivery_time_from": "08:00",
                    "delivery_time_to": "12:00",
                    "delivery_country": "LV",
                    "delivery_postcode": "54321",
                    "delivery_address_row_1": "Kuldnoka 5",
                    "delivery_address_row_2": "Uks 2",
                    "delivery_city": "Riga",
                    "delivery_company_name": "Demo Latvia OÜ",
                    "delivery_contact_name": "Johannes Kurvits",
                    "delivery_contact_email": "support@cargoson.com",
                    "delivery_contact_phone": "+37212345555",
                    "delivery_comment": "Delivery comment example",
                    "delivery_with_tail_lift": true,
                    "delivery_prenotification": true,
                    "delivery_return_document": true,
                    "delivery_to_private_person": true,
                    "goods_value": 13.5,
                    "goods_value_currency": "EUR",
                    "frigo": true,
                    "temp_min": -10,
                    "temp_max": 5,
                    "incoterm_code": "DAP",
                    "incoterm_city": "Riga",
                    "customer_remark": "Customer remark example",
                    "documents_attributes": [
                      {
                        "category": "package_list",
                        "filename": "package-list.pdf",
                        "annex": ""
                      }
                    ],
                    "rows_attributes": [
                      {
                        "quantity": 1,
                        "package_type": "EUR",
                        "description": "Goods on EUR pallet",
                        "weight": 100,
                        "length": 120,
                        "width": 80,
                        "height": 100,
                        "ldm": 0.4,
                        "cbm": 0.96,
                        "adr_rows_attributes": [
                          {
                            "adr_un": "3535",
                            "adr_group": "II",
                            "adr_class": "6.1 (4.1)",
                            "adr_neq": "50",
                            "adr_description": "Fire extinguishers"
                          },
                          {
                            "adr_un": "3535",
                            "adr_group": "II",
                            "adr_class": "6.1 (4.1)",
                            "adr_neq": "10",
                            "adr_description": "More fire extinguishers"
                          }
                        ]
                      },
                      {
                        "quantity": 2,
                        "package_type": "FIN",
                        "description": "Goods on 2 FIN pallets",
                        "weight": 150,
                        "length": 120,
                        "width": 100,
                        "height": 90,
                        "ldm": 1,
                        "cbm": 1.08
                      }
                    ],
                    "options": {
                      "label_format": "label_printer",
                      "direct_booking_service_id": 1234,
                      "create_incomplete_shipment": false,
                      "parcel_machine_reference": "96003"
                    }
                  }
                },
                "OutsideEUFullBooking": {
                  "value": {
                    "customer_reference": "test-customer-ref-123",
                    "collection_date": "2023-08-29",
                    "collection_time_from": "15:00",
                    "collection_time_to": "19:00",
                    "collection_country": "EE",
                    "collection_postcode": "12345",
                    "collection_address_row_1": "Kuldnoka 4",
                    "collection_address_row_2": "Harjumaa",
                    "collection_city": "Tallinn",
                    "collection_company_name": "Demo OÜ",
                    "collection_contact_name": "Cargo Son",
                    "collection_contact_email": "hello@cargoson.com",
                    "collection_contact_phone": "+37255551234",
                    "collection_comment": "Collection comment example",
                    "collection_with_tail_lift": true,
                    "collection_prenotification": true,
                    "delivery_date": "2023-09-15",
                    "delivery_time_from": "08:00",
                    "delivery_time_to": "12:00",
                    "delivery_country": "US",
                    "delivery_postcode": "20500",
                    "delivery_address_row_1": "1600 Pennsylvania Avenue NW",
                    "delivery_address_row_2": "DC",
                    "delivery_city": "Washington",
                    "delivery_company_name": "Demo USA Ltd",
                    "delivery_contact_name": "Boe Jiden",
                    "delivery_contact_email": "support@cargoson.com",
                    "delivery_contact_phone": "+1 12345555",
                    "delivery_comment": "Delivery comment example",
                    "delivery_with_tail_lift": true,
                    "delivery_prenotification": true,
                    "delivery_return_document": true,
                    "delivery_to_private_person": true,
                    "goods_value": 13.5,
                    "goods_value_currency": "EUR",
                    "frigo": true,
                    "temp_min": -10,
                    "temp_max": 5,
                    "incoterm_code": "DAP",
                    "incoterm_city": "Riga",
                    "customer_remark": "Customer remark example",
                    "documents_attributes": [
                      {
                        "category": "package_list",
                        "filename": "package-list.pdf",
                        "annex": ""
                      }
                    ],
                    "rows_attributes": [
                      {
                        "quantity": 1,
                        "package_type": "EUR",
                        "description": "Goods on EUR pallet",
                        "weight": 100,
                        "length": 120,
                        "width": 80,
                        "height": 100,
                        "ldm": 0.4,
                        "cbm": 0.96,
                        "adr_rows_attributes": [
                          {
                            "adr_un": "3535",
                            "adr_group": "II",
                            "adr_class": "6.1 (4.1)",
                            "adr_neq": "50",
                            "adr_description": "Fire extinguishers"
                          },
                          {
                            "adr_un": "3535",
                            "adr_group": "II",
                            "adr_class": "6.1 (4.1)",
                            "adr_neq": "10",
                            "adr_description": "More fire extinguishers"
                          }
                        ]
                      },
                      {
                        "quantity": 2,
                        "package_type": "FIN",
                        "description": "Goods on 2 FIN pallets",
                        "weight": 150,
                        "length": 120,
                        "width": 100,
                        "height": 90,
                        "ldm": 1,
                        "cbm": 1.08
                      }
                    ],
                    "declaration_attributes": {
                      "invoice_reference": "BKN",
                      "invoice_reference_text": "CA12345",
                      "currency": "EUR",
                      "remark": "Some remark here",
                      "declaration_text": "I/We hereby certify that the information on this declaration is true and correct and that the contents of this shipment are as stated above.",
                      "declaration_items_attributes": [
                        {
                          "quantity": 2,
                          "description": "Kindle Scribe - electronic reader",
                          "hs_code": "8543700500",
                          "origin_country": "CH",
                          "unit_of_measure": "PCS",
                          "value": 115.25,
                          "net_weight": 0.5,
                          "gross_weight": 1.5
                        }
                      ],
                      "declaration_charges_attributes": [
                        {
                          "category": "FRCST",
                          "value": 150.5
                        }
                      ],
                      "declaration_documents_attributes": [
                        {
                          "category": "CIV",
                          "document_id": "REF12345"
                        }
                      ]
                    },
                    "options": {
                      "label_format": "label_printer",
                      "direct_booking_service_id": 1234,
                      "create_incomplete_shipment": false,
                      "parcel_machine_reference": "96003"
                    }
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/queries/{id}": {
      "patch": {
        "summary": "Edit a query",
        "operationId": "patchQuery",
        "description": "This endpoint is used to edit an existing query which has no bookings or quotes in Cargoson. \n\nIncluding new ```rows_attributes``` will overwrite any and all previous rows.\n\nIf a ```direct_booking_service_id``` option is provided, a booking will be created.  ```parcel_machine_reference``` can be also be provided alongside the service id, if it is a parcel machine service. \n\nIf ```automated_booking``` option is provided, the service will be automatically chosen based on user-defined rules and a booking will be created.\n",
        "tags": [
          "Shipments"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json",
              "enum": [
                "application/json"
              ]
            },
            "required": true,
            "description": "The API can read JSON messages. The value should be application/json"
          },
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.api.v1",
              "enum": [
                "application/vnd.api.v1"
              ]
            },
            "description": "This header is for defining the API version. The value should be application/vnd.api.v1",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID or reference of the query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query is changed, and the query is found in the response body. \n\nYou can find the label and tracking URLs in the elements ```label_url``` and ```tracking_url```, respectively. When visiting these URLs the user will not see any content until the shipment is booked in Cargoson.\n",
            "content": {}
          },
          "422": {
            "description": "Couldn't (fully) complete request due to some issue in the input data. You can find the error messages in the ```errors``` array.\n\nIf you included the option to immediately book the shipment to a specific carrier's service (options/direct_booking_service_id), it is possible that the shipment was created but it couldn't be booked to the requested service. When this happens, you will see the created query elements, along with a ```\"query_status\": \"created\"``` and a ```\"booking_status\": \"failed\"```. The error messages will be included in the ```errors``` array.\n",
            "content": {}
          },
          "404": {
            "description": "A query with the provided ID could not be found",
            "content": {}
          },
          "403": {
            "description": "The API key does not have enough privileges to complete this operation or a booking/quote exists for the shipment",
            "content": {}
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              },
              "examples": {
                "MinimumChange": {
                  "value": {
                    "collection_date": "2023-08-29"
                  }
                },
                "MinimumBooking": {
                  "value": {
                    "options": {
                      "direct_booking_service_id": 1234
                    }
                  }
                }
              }
            }
          },
          "required": true
        }
      },
      "delete": {
        "summary": "Cancel a query",
        "operationId": "cancelQuery",
        "description": "This endpoint is used to delete an existing query which has no bookings in Cargoson. \n\nIf a ```direct_booking_service_id``` is provided, a booking will be created as well.  ```parcel_machine_reference``` can be also be provided alongside the service id, if it is a parcel machine service.\n",
        "tags": [
          "Shipments"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json",
              "enum": [
                "application/json"
              ]
            },
            "required": true,
            "description": "The API can read JSON messages. The value should be application/json"
          },
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.api.v1",
              "enum": [
                "application/vnd.api.v1"
              ]
            },
            "description": "This header is for defining the API version. The value should be application/vnd.api.v1",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID or reference of the query"
          }
        ],
        "responses": {
          "200": {
            "description": "Query deleted.\n",
            "content": {}
          },
          "422": {
            "description": "Couldn't (fully) complete request due to some issue in the input data. You can find the error messages in the ```errors``` array.\n\nIf you included the option to immediately book the shipment to a specific carrier's service (options/direct_booking_service_id), it is possible that the shipment was created but it couldn't be booked to the requested service. When this happens, you will see the created query elements, along with a ```\"query_status\": \"created\"``` and a ```\"booking_status\": \"failed\"```. The error messages will be included in the ```errors``` array.\n",
            "content": {}
          },
          "403": {
            "description": "The API key does not have enough privileges to complete this operation or shipment is already booked",
            "content": {}
          },
          "404": {
            "description": "A query with the provided ID could not be found",
            "content": {}
          }
        }
      }
    },
    "/bookings/{id}": {
      "get": {
        "summary": "Return details about a booking",
        "operationId": "getBookingByIdOrReference",
        "description": "This endpoint is used to get information about a shipment which is already booked to a carrier (a booking). \n\nEither an ID or a reference (XX12345) must be provided.\n",
        "tags": [
          "Booking info"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json",
              "enum": [
                "application/json"
              ]
            },
            "required": true,
            "description": "The API can read JSON messages. The value should be application/json"
          },
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.api.v1",
              "enum": [
                "application/vnd.api.v1"
              ]
            },
            "description": "This header is for defining the API version. The value should be application/vnd.api.v1",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID or reference of the booking to return"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and the booking attributes are included in the response body",
            "content": {}
          },
          "401": {
            "description": "Unauthorized request or the requested booking was not found (invalid ID/reference)",
            "content": {}
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBookingRequestBody"
              },
              "examples": {
                "FullExample": {
                  "value": {
                    "options": {
                      "label_format": "a4",
                      "include_associations": {
                        "rows": true,
                        "offer": true,
                        "carrier": true,
                        "consignor": true,
                        "consignee": true,
                        "declaration": true
                      }
                    }
                  }
                }
              }
            }
          },
          "required": false
        }
      },
      "patch": {
        "summary": "Edit a booking",
        "operationId": "patchBooking",
        "description": "This endpoint is used to edit an existing booking in Cargoson. \n\nIncluding new ```rows_attributes``` will overwrite any and all previous rows.\n",
        "tags": [
          "Booking info"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json",
              "enum": [
                "application/json"
              ]
            },
            "required": true,
            "description": "The API can read JSON messages. The value should be application/json"
          },
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.api.v1",
              "enum": [
                "application/vnd.api.v1"
              ]
            },
            "description": "This header is for defining the API version. The value should be application/vnd.api.v1",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID or reference of the booking"
          }
        ],
        "responses": {
          "200": {
            "description": "Booking is changed, and the Booking is found in the response body. \n\nYou can find the label and tracking URLs in the elements ```label_url``` and ```tracking_url```, respectively. When visiting these URLs the user will not see any content until the shipment is booked in Cargoson.\n",
            "content": {}
          },
          "422": {
            "description": "Couldn't (fully) complete request due to some issue in the input data. You can find the error messages in the ```errors``` array.\n",
            "content": {}
          },
          "404": {
            "description": "A booking with the provided ID could not be found",
            "content": {}
          },
          "403": {
            "description": "The API key does not have enough privileges to complete this operation",
            "content": {}
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              },
              "examples": {
                "MinimumChange": {
                  "value": {
                    "collection_date": "2023-08-29"
                  }
                }
              }
            }
          },
          "required": true
        }
      },
      "delete": {
        "summary": "Cancel a Booking",
        "operationId": "cancelBooking",
        "description": "This endpoint is used to delete an existing booking in Cargoson. \n\nThis cannot be undone and should be agreed upon with the carrier beforehand.\n",
        "tags": [
          "Booking info"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json",
              "enum": [
                "application/json"
              ]
            },
            "required": true,
            "description": "The API can read JSON messages. The value should be application/json"
          },
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.api.v1",
              "enum": [
                "application/vnd.api.v1"
              ]
            },
            "description": "This header is for defining the API version. The value should be application/vnd.api.v1",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID or reference of the booking"
          }
        ],
        "responses": {
          "200": {
            "description": "Booking deleted.\n",
            "content": {}
          },
          "422": {
            "description": "Couldn't (fully) complete request due to some issue in the input data. You can find the error messages in the ```errors``` array.\n",
            "content": {}
          },
          "403": {
            "description": "The API key does not have enough privileges to complete this operation",
            "content": {}
          },
          "404": {
            "description": "Booking could not be found",
            "content": {}
          }
        }
      }
    },
    "/freightPrices/list": {
      "post": {
        "summary": "Return a list of prices for a shipment",
        "operationId": "getPrices",
        "description": "This endpoint is used to get a list of prices for a shipment from different carriers from Cargoson. The returned prices are sourced from the user's personal price lists or from the online prices of the user's carriers.\n",
        "tags": [
          "Freight prices"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/json",
              "enum": [
                "application/json"
              ]
            },
            "required": true,
            "description": "The API can read JSON messages. The value should be application/json"
          },
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.api.v1",
              "enum": [
                "application/vnd.api.v1"
              ]
            },
            "description": "This header is for defining the API version. The value should be application/vnd.api.v1",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and the found prices are included in the response body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailablePrices"
                }
              }
            }
          },
          "204": {
            "description": "The request was valid but no results were found",
            "content": {}
          },
          "401": {
            "description": "Unauthorized request",
            "content": {}
          },
          "422": {
            "description": "Unprocessable entry - the request was invalid",
            "content": {}
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceRequestShipment"
              },
              "examples": {
                "FullExample": {
                  "value": {
                    "collection_date": "2023-08-29",
                    "collection_postcode": "12345",
                    "collection_country": "EE",
                    "collection_with_tail_lift": true,
                    "collection_prenotification": true,
                    "delivery_postcode": "54321",
                    "delivery_country": "LV",
                    "delivery_with_tail_lift": true,
                    "delivery_prenotification": true,
                    "delivery_return_document": true,
                    "delivery_to_private_person": true,
                    "frigo": true,
                    "adr": false,
                    "rows_attributes": [
                      {
                        "quantity": 1,
                        "package_type": "EUR",
                        "weight": 100,
                        "description": "Goods on EUR pallet"
                      },
                      {
                        "quantity": 2,
                        "package_type": "FIN",
                        "weight": 300,
                        "description": "Goods on two FIN pallets"
                      }
                    ],
                    "request_external_partners": false,
                    "carrier_id": ""
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    },
    "/parcelMachines": {
      "get": {
        "summary": "Return a list of parcel machines",
        "operationId": "getParcelMachines",
        "description": "Return a list of parcel machines. All of the returned parcel machines only belong to the carriers that are activated in the account (no irrelevant machines are returned). Additional search filters can be applied to limit the size of the response.\n",
        "tags": [
          "ParcelMachine"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.api.v1",
              "enum": [
                "application/vnd.api.v1"
              ]
            },
            "description": "This header is for defining the API version. The value should be application/vnd.api.v1",
            "required": true
          },
          {
            "name": "country",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Return parcel machines only from this two-letter country code (ISO 3166-1 alpha-2)"
          },
          {
            "name": "carrier_id",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "Return parcel machines only from this carrier ID"
          },
          {
            "name": "postcode",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Return parcel machines only from this postcode"
          },
          {
            "name": "reference",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Return parcel machines that have this reference. If the reference is correct, it will normally return exactly one parcel machine. But, since the references are defined by the carriers, it is not guaranteed that parcel machines have unique references and therefore it might return more parcel machines. It is recommended to add additional filters, such as ```carrier_id``` to avoid this problem."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and the parcel machines are included in the response body. If the response body is an empty array, no parcel machines were found based on your criteria.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParcelMachines"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {}
          }
        }
      }
    },
    "/emissions/co2e": {
      "post": {
        "summary": "Return expected CO2e emissions for a shipment",
        "operationId": "co2e",
        "description": "Returns a list of expected CO2e emissions in kg for applicaple freight types\n",
        "tags": [
          "CO2e"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.api.v1",
              "enum": [
                "application/vnd.api.v1"
              ]
            },
            "description": "This header is for defining the API version. The value should be application/vnd.api.v1",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and the calculated coordinates, distances and co2e emissions are in the return body\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Emissions"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {}
          },
          "422": {
            "description": "Couldn't (fully) complete request due to some issue in the input data. You can find the error messages in the ```errors``` array.",
            "content": {}
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              },
              "examples": {
                "SampleShipment": {
                  "value": {
                    "collection_date": "2023-08-29",
                    "collection_country": "EE",
                    "collection_postcode": "10619",
                    "collection_address_row_1": "Kuldnoka 4",
                    "collection_city": "Tallinn",
                    "delivery_country": "FR",
                    "delivery_postcode": "59000",
                    "delivery_address_row_1": "23 Rue Gosselet",
                    "delivery_city": "Lille",
                    "rows_attributes": [
                      {
                        "quantity": 3,
                        "package_type": "EUR",
                        "weight": 1000,
                        "description": "Goods on EUR pallet"
                      },
                      {
                        "quantity": 2,
                        "package_type": "FIN",
                        "weight": 500,
                        "description": "Goods on FIN pallet"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://www.cargoson.com/api",
      "description": "Cargoson live environment"
    },
    {
      "url": "https://cargoson-staging.herokuapp.com/api",
      "description": "Cargoson staging (test) environment"
    }
  ],
  "security": [
    {
      "Token": []
    }
  ],
  "components": {
    "links": {},
    "callbacks": {},
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "customer_reference": {
            "type": "string",
            "description": "Internal shipment reference"
          },
          "collection_date": {
            "type": "string",
            "format": "date",
            "description": "Date when goods are ready for collection. Can be today or in the future"
          },
          "collection_time_from": {
            "type": "string",
            "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
            "description": "Must be before collection time to. Cannot be less than current local time if collection date is set to today"
          },
          "collection_time_to": {
            "type": "string",
            "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
            "description": "Must be after collection time from"
          },
          "delivery_date": {
            "type": "string",
            "format": "date",
            "description": "Desired delivery date. Must be equal to the collection date or later"
          },
          "delivery_time_from": {
            "type": "string",
            "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
            "description": "Must be before delivery time to. If collection and delivery dates match then must be after collection time to"
          },
          "delivery_time_to": {
            "type": "string",
            "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
            "description": "Must be after delivery time from"
          },
          "collection_company_name": {
            "type": "string",
            "description": "The name of the company the goods are collected from"
          },
          "collection_address_row_1": {
            "type": "string",
            "description": "Street, house number"
          },
          "collection_address_row_2": {
            "type": "string",
            "description": "County, building, unit"
          },
          "collection_postcode": {
            "type": "string",
            "minLength": 3,
            "description": "ZIP or postal code. May contain both numbers and letters. Should not include the country code."
          },
          "collection_city": {
            "type": "string",
            "description": "City, district, suburb, town or village"
          },
          "collection_country": {
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "description": "Two-letter country code (ISO 3166-1 alpha-2)"
          },
          "collection_contact_name": {
            "type": "string",
            "description": "The name of the person that the driver can contact"
          },
          "collection_contact_phone": {
            "type": "string",
            "description": "The phone number of the person that the driver can contact"
          },
          "collection_contact_email": {
            "type": "string",
            "description": "The email of the person that the carrier can contact"
          },
          "collection_comment": {
            "type": "string",
            "description": "Additional collection related information. (e.g., \"Code to enter the gate is 1234\")"
          },
          "delivery_company_name": {
            "type": "string",
            "description": "The name of the company the goods are delivered to"
          },
          "delivery_address_row_1": {
            "type": "string",
            "description": "Street, house number"
          },
          "delivery_address_row_2": {
            "type": "string",
            "description": "County, building, unit"
          },
          "delivery_postcode": {
            "type": "string",
            "minLength": 3,
            "description": "ZIP or postal code. May contain both numbers and letters. Should not include the country code."
          },
          "delivery_city": {
            "type": "string",
            "description": "City, district, suburb, town or village"
          },
          "delivery_country": {
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "description": "Two-letter country code (ISO 3166-1 alpha-2)"
          },
          "delivery_contact_name": {
            "type": "string",
            "description": "The name of the person that the driver can contact"
          },
          "delivery_contact_phone": {
            "type": "string",
            "description": "The phone number of the person that the driver can contact"
          },
          "delivery_contact_email": {
            "type": "string",
            "description": "The email of the person that the carrier can contact"
          },
          "delivery_comment": {
            "type": "string",
            "description": "Additional delivery related information. (e.g., \"Code to enter the gate is 1234\")"
          },
          "goods_value": {
            "type": "number",
            "description": "The monetary value of the goods"
          },
          "goods_value_currency": {
            "type": "string",
            "default": "EUR",
            "description": "Three-letter currency code (ISO 4217)"
          },
          "frigo": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the goods are temperature sensitive"
          },
          "temp_min": {
            "type": "integer",
            "description": "Minimum temperature limit"
          },
          "temp_max": {
            "type": "integer",
            "description": "Maximum temperature limit"
          },
          "incoterm_code": {
            "type": "string",
            "description": "International Commercial Terms are a series of pre-defined commercial terms published by the International Chamber of Commerce (ICC) relating to international commercial law",
            "enum": [
              "EXW",
              "FCA",
              "CPT",
              "CIP",
              "DAT",
              "DPU",
              "DAP",
              "DDP",
              "FAS",
              "FOB",
              "CFR",
              "CIF"
            ]
          },
          "incoterm_city": {
            "type": "string",
            "description": "Incoterm city"
          },
          "customer_remark": {
            "type": "string",
            "description": "Important additional information for the carrier"
          },
          "collection_with_tail_lift": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the collection should be performed with a tail-lift truck"
          },
          "collection_prenotification": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the driver should call the collection contact before loading"
          },
          "delivery_with_tail_lift": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the delivery should be performed with a tail-lift truck"
          },
          "delivery_prenotification": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the driver should call the delivery contact before loading"
          },
          "delivery_return_document": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the customer expects signed documents to be returned"
          },
          "delivery_to_private_person": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the goods will be delivered to a private person instead of a company"
          },
          "documents_attributes": {
            "type": "array",
            "minItems": 0,
            "description": "Array of files that will be attached to the shipment",
            "items": {
              "type": "object",
              "required": [
                "category",
                "filename",
                "annex"
              ],
              "properties": {
                "category": {
                  "type": "string",
                  "description": "Type of the document selected from the predefined document types",
                  "enum": [
                    "goods_invoice",
                    "package_list",
                    "cmr",
                    "waybill",
                    "bol",
                    "transportation_invoice",
                    "pod",
                    "labels",
                    "other"
                  ]
                },
                "filename": {
                  "type": "string",
                  "description": "File name with extension"
                },
                "annex": {
                  "type": "string",
                  "description": "File content in Base64 encoded string"
                }
              }
            }
          },
          "rows_attributes": {
            "type": "array",
            "minItems": 1,
            "description": "Array of goods rows, with each row consisting of the following 7 (or less) key-value pairs and an array of ADR rows (not required)",
            "items": {
              "type": "object",
              "required": [
                "quantity",
                "package_type",
                "weight",
                "description"
              ],
              "properties": {
                "quantity": {
                  "type": "integer",
                  "description": "Number of packages"
                },
                "package_type": {
                  "type": "string",
                  "description": "Type of the package selected from the predefined package types",
                  "enum": [
                    "EUR",
                    "CTN",
                    "FIN",
                    "HPL",
                    "QPL",
                    "LOAD",
                    "PLD",
                    "PXL",
                    "PLL",
                    "TBE",
                    "CLL",
                    "RLL",
                    "20DC",
                    "40DC",
                    "40HC"
                  ]
                },
                "weight": {
                  "type": "integer",
                  "description": "Total weight in kilograms of the goods described in the row. If there are 5 EUR pallets, 100kg each, then the weight is 500 kg"
                },
                "length": {
                  "type": "integer",
                  "description": "Package length in cm"
                },
                "width": {
                  "type": "integer",
                  "description": "Package width in cm"
                },
                "height": {
                  "type": "integer",
                  "description": "Package height in cm"
                },
                "cbm": {
                  "type": "number",
                  "description": "Row volume in cubic meters"
                },
                "ldm": {
                  "type": "number",
                  "description": "Row area in loading meters (ex.: 1 EUR pallet = 0.4 LDM)"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the goods in this row"
                },
                "adr_rows_attributes": {
                  "type": "array",
                  "description": "Array of dangerous goods rows that are included in this goods row, with each row consisting of the following 5 (or less) key-value pairs",
                  "items": {
                    "type": "object",
                    "properties": {
                      "adr_un": {
                        "type": "string",
                        "pattern": ".{3,4}",
                        "description": "Four-digit UN number that identifies hazardous materials, and articles"
                      },
                      "adr_group": {
                        "type": "string",
                        "description": "I - high danger, II - medium danger, III - low danger"
                      },
                      "adr_class": {
                        "type": "string",
                        "description": "1 - Explosives, 2 - Gases, 3 - Flammable liquids, 4 - Flammable solids"
                      },
                      "adr_neq": {
                        "type": "string",
                        "description": "The weight or volume of the dangerous goods contained in a package excluding the weight or volume of any packaging material; or the weight of an unpackaged article of dangerous goods"
                      },
                      "adr_description": {
                        "type": "string",
                        "description": "Description of the dangerous goods"
                      }
                    }
                  }
                }
              }
            }
          },
          "offer": {
            "type": "object",
            "required": [
              "total_price"
            ],
            "properties": {
              "total_price": {
                "type": "number",
                "description": "Price for the shipment that has been previously agreed upon with carrier"
              },
              "currency": {
                "type": "string",
                "description": "Currency of agreed price. Defaults to user's company's currency if not provided"
              }
            }
          },
          "options": {
            "type": "object",
            "properties": {
              "label_format": {
                "type": "string",
                "description": "The response includes a link to the goods labels. The link will be empty until the shipment is booked in Cargoson. You can choose the format of those labels with this option. \n\n**a4** => up to four A6 labels per one A4 page. \n\n**label_printer** => one label per page in the size of 4x6 inches (10.16 x 15.24 cm, which is close to the A6 format.)\n",
                "enum": [
                  "label_printer",
                  "a4"
                ],
                "default": "label_printer"
              },
              "direct_booking_service_id": {
                "type": "integer",
                "description": "If you wish to submit the booking immediately, you can enter the ID of the desired carrier's service. You can request the service IDs from Cargoson support.\n"
              },
              "create_incomplete_shipment": {
                "type": "boolean",
                "default": true,
                "description": "Indicates if you want the shipment to be saved for later editing even if booking itself fails"
              },
              "automated_booking": {
                "type": "boolean",
                "default": false,
                "description": "Indicates if you want the shipment to be automatically booked based on rules defined in Cargoson by the user"
              },
              "save_collection_address": {
                "type": "boolean",
                "default": false,
                "description": "Indicates if you want to save the collection address in Cargoson's address book for later use"
              },
              "save_delivery_address": {
                "type": "boolean",
                "default": false,
                "description": "Indicates if you want to save the delivery address in Cargoson's address book for later use"
              },
              "parcel_machine_reference": {
                "type": "string",
                "description": "If ```direct_booking_service_id``` was defined, and the service id is for a parcel machine service, you can define the desired parcel machine here. If the service is a parcel machine service but this element is not defined, the closest parcel machine to the delivery address will be selected. You can request the desired parcel machine references from Cargoson support. Do not use if the ```direct_booking_service_id``` was not used or is not a parcel machine service ID:\n"
              }
            }
          },
          "declaration_attributes": {
            "type": "object",
            "description": "If the shipment requires a customs declaration, these fields should be filled",
            "required": [
              "declaration_items_attributes"
            ],
            "properties": {
              "invoice_reference": {
                "type": "string",
                "description": "Invoice reference.  \n\nACL - Parent Shipment ID for BBX  \nCID - Customer Identifier  \nCN - Contract Number  \nCU - Consignor reference number  \nITN - US Export declaration reference ID  \nMRN - Movement Reference number  \nUCN - Unique reference of a consignment (UCRN)  \nOID - Order Number  \nPON - Purchase Order Number  \nRMA - RMA Number  \nAAM - AWB Ref #  \nABT - Goods Declaration number  \nADA - Buyer Reference number  \nAES - AES Post Clearance  \nAFD - 1496 Item number  \nANT - Consignee Reference number  \nBKN - Booking Number  \nBOL - Bill of Lading Number  \nCDN - Customs Declaration number  \nCOD - Cash On Delivery  \nDSC - Weltpaket Reference  \nFF - Freight forwarder's reference number  \nFN - Freight bill number  \nFTR - Post Clearance Exemption US  \nHWB - Shipment Identifiers  \nIBC - Inbound center reference number  \nIPP - Insurance Policy Provider  \nLLR - Load list reference  \nMAB - Master Airwaybill Number  \nMWB - MAWB Reference number  \nOBC - Outbound center reference number  \nPD - Vendor Reference Number  \nPRN - Pickup request number  \nRTL - Return Leg waybill number  \nSID - Shipment ID 15 Digit CODA  \nSS - Seller Reference number  \nSWN - Original Waybill number (Return)\n",
                "enum": [
                  "ACL",
                  "CID",
                  "CN",
                  "CU",
                  "ITN",
                  "MRN",
                  "UCN",
                  "OID",
                  "PON",
                  "RMA",
                  "AAM",
                  "ABT",
                  "ADA",
                  "AES",
                  "AFD",
                  "ANT",
                  "BKN",
                  "BOL",
                  "CDN",
                  "COD",
                  "DSC",
                  "FF",
                  "FN",
                  "FTR",
                  "HWB",
                  "IBC",
                  "IPP",
                  "LLR",
                  "MAB",
                  "MWB",
                  "OBC",
                  "PD",
                  "PRN",
                  "RTL",
                  "SID",
                  "SS",
                  "SWN"
                ]
              },
              "invoice_reference_text": {
                "type": "string",
                "description": "Invoice reference number"
              },
              "currency": {
                "type": "string",
                "description": "Currency for all values in declaration. ISO 4217"
              },
              "remark": {
                "type": "string",
                "description": "Remarks for declaration"
              },
              "declaration_text": {
                "type": "string",
                "description": "Field to explicity state that the information declared is correct"
              },
              "declaration_items_attributes": {
                "type": "array",
                "description": "Goods to be declared",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "required": [
                    "quantity",
                    "unit_of_measure",
                    "hs_code",
                    "net_weight",
                    "gross_weight",
                    "origin_country",
                    "value",
                    "description"
                  ],
                  "properties": {
                    "quantity": {
                      "type": "integer",
                      "description": "Number of goods"
                    },
                    "unit_of_measure": {
                      "type": "string",
                      "description": "Unit of measure of stated quanity. (Usually Pieces)   \nBOX: Boxes  \n2GM: Centigram  \n2M: Centimeters  \n2M3: Cubic Centimeters  \n3M3: Cubic Feet  \nM3: Cubic Meters  \nDPR: Dozen Pairs  \nDOZ: Dozen  \n2NO: Each  \nPCS: Pieces  \nGM: Grams  \nGRS: Gross  \nKG: Kilograms  \nL: Liters  \nM: Meters  \n3GM: Milligrams  \n3L: Milliliters  \nX: No Unit Required  \nNO: Number  \n2KG: Ounces  \nPRS: Pairs  \n2L: Gallons  \n3KG: Pounds  \nCM2: Square Centimeters  \n2M2: Square Feet  \n3M2: Square Inches  \nM2: Square Meters  \n4M2: Square Yards  \n3M: Yards\n",
                      "enum": [
                        "BOX",
                        "2GM",
                        "2M",
                        "2M3",
                        "3M3",
                        "M3",
                        "DPR",
                        "DOZ",
                        "2NO",
                        "PCS",
                        "GM",
                        "GRS",
                        "KG",
                        "L",
                        "M",
                        "3GM",
                        "3L",
                        "X",
                        false,
                        "2KG",
                        "PRS",
                        "2L",
                        "3KG",
                        "CM2",
                        "2M2",
                        "3M2",
                        "M2",
                        "4M2",
                        "3M"
                      ]
                    },
                    "hs_code": {
                      "type": "string",
                      "description": "TARIC (10 digits), Combined Nomenclature (8 digits) or Harmonised System code (6 digits) for goods"
                    },
                    "origin_country": {
                      "type": "string",
                      "description": "Country of Origin/Manufacture. ISO 3166-2"
                    },
                    "net_weight": {
                      "type": "number",
                      "description": "Net weight of goods (kg) PER ITEM"
                    },
                    "gross_weight": {
                      "type": "number",
                      "description": "Gross weight of goods (kg) PER ITEM"
                    },
                    "value": {
                      "type": "number",
                      "description": "Value of goods PER ITEM"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the goods, as descriptive as possible"
                    }
                  }
                }
              },
              "declaration_charges_attributes": {
                "type": "array",
                "description": "Charges",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "Charge type  \n  \nADMIN: Administration fee  \nDELIV: Delivery fee  \nDOCUM: Documentation fee  \nEXPED: Expedite fee  \nEXCHA: Export fee  \nFRCST: Freight cost  \nSSRGE: Fuel surcharge  \nLOGST: Logistic fee  \nSOTHR: Other fee  \nSPKGN: Packaging/packing fee  \nPICUP: Pickup fee  \nHRCRG: Handling fee  \nVATCR: VAT fee  \nINSCH: Insurance cost  \nREVCH: Reverse charge\n",
                      "enum": [
                        "ADMIN",
                        "DELIV",
                        "DOCUM",
                        "EXPED",
                        "EXCHA",
                        "FRCST",
                        "SSRGE",
                        "LOGST",
                        "SOTHR",
                        "SPKGN",
                        "PICUP",
                        "HRCRG",
                        "VATCR",
                        "INSCH",
                        "REVCH"
                      ]
                    },
                    "value": {
                      "type": "number",
                      "description": "Charge value"
                    }
                  }
                }
              },
              "declaration_documents_attributes": {
                "type": "array",
                "description": "Document references related to declaration. These files should be included in the ```documents_attributes```",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "Document type  \n  \n972: T2LF Dispense Paiement Droits  \nAHC: Analysis and Health Certificate  \nATA: ATA Carnet  \nATR: Preference Certificate ATR  \nCHD: CHED-D (Common Health Entry Document for Feed and Food of Non-Animal Origin)  \nCHP: CHED-P (Common Health Entry Document for Products)  \nCIT: CITES Certificate  \nCOO: Generic Certificate of Origin  \nDEX: Duty Exemption Certificate  \nEU1: Preference Certificate EUR1  \nEU2: Preferential Declaration of Origin on the Invoice - EUR2  \nEUS: End Use Authorization  \nFMA: Certificate of Origin (Form A)  \nPHY: Phytosanitary Certificate  \nVET: Veterinary Entry Document  \nVEX: VAT Exemption Certificate  \nCRL: Control Document  \nCSD: Consolidated Customs Entry  \nPPY: Proof Of Payment  \nCI2: Export-only Invoice  \nCIV: Customs Invoice Value  \nDOV: Invoice  \nINV: Commercial Invoice  \nPFI: Pro-Forma  \nALC: Agricultural License  \nHLC: Health Products RegulatoryAuthority (HPRA) Licensing Requirements  \nJLC: Justice License  \nLIC: Specific Export Licenses  \nLNP: License or Permit  \nPLI: Permits & Licenses  \nDLI: Driver's License  \nNID: National Identity Card  \nPAS: Passport  \nCHA: Power of Attorney  \nCPA: Consignee Power of Attorney  \nPOA: Power of Attorney (Customer-based)  \nBEX: Branch Letter of Exemption  \nDGD: Dangerous Goods Declaration  \nIPA: Intellectual Property Authorization  \nT2M: T2M Transport Accompanying Document  \nTAD: TAD Transport Accompanying Document T1  \nTCS: Transportation Charges Statement  \nROD: Receipt on Delivery  \nEXL: DCE Export of Customs Data  \nHWB: House Waybill  \nELP: Export Licenses and Permits\n",
                      "enum": [
                        "CIV",
                        "DOV",
                        "INV",
                        "ATR",
                        "CHD",
                        "CHP",
                        "CIT",
                        "COO",
                        "DEX",
                        "EU1",
                        "EU2",
                        "EUS",
                        "FMA",
                        "PHY",
                        "VET",
                        "VEX",
                        "CRL",
                        "CSD",
                        "PPY",
                        "CI2",
                        "972",
                        "AHC",
                        "ATA",
                        "PFI",
                        "ALC",
                        "HLC",
                        "JLC",
                        "LIC",
                        "LNP",
                        "PLI",
                        "DLI",
                        "NID",
                        "PAS",
                        "CHA",
                        "CPA",
                        "POA",
                        "BEX",
                        "DGD",
                        "IPA",
                        "T2M",
                        "TAD",
                        "TCS",
                        "ROD",
                        "EXL",
                        "HWB",
                        "ELP"
                      ]
                    },
                    "document_id": {
                      "type": "string",
                      "description": "Document reference number/ID"
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "collection_date",
          "collection_postcode",
          "collection_country",
          "delivery_postcode",
          "delivery_country",
          "rows_attributes"
        ]
      },
      "PriceRequestShipment": {
        "type": "object",
        "description": "the shipment for which the prices are requested",
        "properties": {
          "collection_date": {
            "type": "string",
            "format": "date",
            "description": "Date when goods are ready for collection. Can be today or in the future"
          },
          "collection_postcode": {
            "type": "string",
            "minLength": 3,
            "description": "ZIP or postal code. May contain both numbers and letters. Should not include the country code."
          },
          "collection_country": {
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "description": "Two-letter country code (ISO 3166-1 alpha-2)"
          },
          "delivery_postcode": {
            "type": "string",
            "minLength": 3,
            "description": "ZIP or postal code. May contain both numbers and letters. Should not include the country code."
          },
          "delivery_country": {
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "description": "Two-letter country code (ISO 3166-1 alpha-2)"
          },
          "frigo": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the goods are temperature sensitive"
          },
          "adr": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the shipment is hazardous (ADR). The shipment is hazardous if any of its goods contain hazardous goods"
          },
          "collection_prenotification": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the driver should call the collection contact before loading"
          },
          "collection_with_tail_lift": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the collection should be performed with a tail-lift truck"
          },
          "delivery_prenotification": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the driver should call the delivery contact before loading"
          },
          "delivery_with_tail_lift": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the delivery should be performed with a tail-lift truck"
          },
          "delivery_return_document": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the customer expects signed documents to be returned"
          },
          "delivery_to_private_person": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether the goods will be delivered to a private person instead of a company"
          },
          "rows_attributes": {
            "type": "array",
            "minItems": 1,
            "description": "Array of goods rows, with each row consisting of the following 7 (or less) key-value pairs",
            "items": {
              "type": "object",
              "required": [
                "quantity",
                "package_type",
                "weight"
              ],
              "properties": {
                "quantity": {
                  "type": "integer",
                  "description": "Number of packages"
                },
                "package_type": {
                  "type": "string",
                  "description": "Type of the package selected from the predefined package types",
                  "enum": [
                    "EUR",
                    "CTN",
                    "FIN",
                    "HPL",
                    "QPL",
                    "LOAD",
                    "PLD",
                    "PXL",
                    "PLL",
                    "TBE",
                    "CLL",
                    "RLL",
                    "20DC",
                    "40DC",
                    "40HC"
                  ]
                },
                "weight": {
                  "type": "integer",
                  "description": "Total weight in kilograms of the goods described in the row. If there are 5 EUR pallets, 100kg each, then the weight is 500 kg"
                },
                "length": {
                  "type": "integer",
                  "description": "Package length in cm"
                },
                "width": {
                  "type": "integer",
                  "description": "Package width in cm"
                },
                "height": {
                  "type": "integer",
                  "description": "Package height in cm"
                },
                "cbm": {
                  "type": "number",
                  "description": "Row volume in cubic meters"
                },
                "ldm": {
                  "type": "number",
                  "description": "Row area in loading metres (ex.: 1 EUR pallet = 0.4 LDM)"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the goods in this row"
                }
              }
            }
          }
        },
        "required": [
          "collection_date",
          "collection_postcode",
          "collection_country",
          "delivery_postcode",
          "delivery_country"
        ]
      },
      "GetBookingRequestBody": {
        "type": "object",
        "description": "Request body for defining different options for fetching a booking",
        "properties": {
          "options": {
            "type": "object",
            "description": "Object that holds different options for fetching data about the booking",
            "properties": {
              "label_format": {
                "type": "string",
                "description": "The response includes a link to the goods labels. You can choose the format of those labels with this option. \n\n```a4``` => up to four A6 labels per one A4 page. \n\n```label_printer``` => one label per page in the size of 4x6 inches (10.16 x 15.24 cm, which is close to the A6 format.)\n",
                "enum": [
                  "label_printer",
                  "a4"
                ],
                "default": "label_printer"
              },
              "include_associations": {
                "type": "object",
                "description": "Object that holds options for which attribute groups to fetch. By default, these additional attributes are all disabled. Enable only what you need, since every additional step will make the request a bit slower.",
                "properties": {
                  "offer": {
                    "type": "boolean",
                    "default": false,
                    "description": "Indicates whether you want to receive information about the selected offer (price, service, carrier etc)."
                  },
                  "carrier": {
                    "type": "boolean",
                    "default": false,
                    "description": "Indicates whether you want to receive information about the selected carrier."
                  },
                  "consignor": {
                    "type": "boolean",
                    "default": false,
                    "description": "Indicates whether you want to receive information about the consignor (sender)."
                  },
                  "consignee": {
                    "type": "boolean",
                    "default": false,
                    "description": "Indicates whether you want to receive information about the consignee (receiver)."
                  },
                  "rows": {
                    "type": "boolean",
                    "default": false,
                    "description": "Indicates whether you want to receive information about the goods rows."
                  },
                  "declaration": {
                    "type": "boolean",
                    "default": false,
                    "description": "Indicates whether you want to receive information about the declaration."
                  }
                }
              }
            }
          }
        }
      },
      "AvailablePrices": {
        "type": "object",
        "example": {
          "status": 200,
          "object": {
            "prices": [
              {
                "carrier": "DSV Estonia AS",
                "reg_no": "10342368",
                "id": 3,
                "service": "Main",
                "service_id": 85,
                "price": "19.13",
                "unit": "payable_weight",
                "type": "price_list"
              },
              {
                "carrier": "DSV Estonia AS",
                "reg_no": "10342368",
                "id": 3,
                "service": "Express Service",
                "service_id": 123,
                "price": "32.50",
                "unit": "real_weight",
                "type": "online"
              },
              {
                "carrier": "DPD Eesti AS",
                "reg_no": "10092256",
                "id": 10,
                "service": "Main",
                "service_id": 555,
                "price": "20.00",
                "unit": "payable_weight",
                "type": "price_list"
              }
            ]
          }
        },
        "properties": {
          "status": {
            "type": "integer",
            "description": "Status code"
          },
          "object": {
            "type": "object",
            "description": "The object containing the prices array",
            "properties": {
              "prices": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "A price object detailing the price of the shipment, the carrier and the service whom which the price is from, and the source of the price",
                  "properties": {
                    "carrier": {
                      "type": "string",
                      "description": "The name of the carrier from which the price is from"
                    },
                    "id": {
                      "type": "integer",
                      "description": "The numeric ID of the carrier for more reliable identification"
                    },
                    "reg_no": {
                      "type": "string",
                      "description": "The business registration number of the carrier"
                    },
                    "service": {
                      "type": "string",
                      "description": "The name of the carrier service that the price is related to. One carrier can have multiple prices if they have multiple services defined"
                    },
                    "service_id": {
                      "type": "integer",
                      "description": "The numeric ID of the carrier service for more reliable identification"
                    },
                    "price": {
                      "type": "string",
                      "description": "The price for the requested shipment related to this carrier and service. The price is a float rounded to two decimal places, represented as a string"
                    },
                    "unit": {
                      "type": "string",
                      "description": "The measurement unit by which the price was calculated",
                      "enum": [
                        "payable_weight",
                        "real_weight",
                        "parcel",
                        "eur_pll",
                        "fin_pll",
                        "xl_pll",
                        "half_pll"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "description": "The source of this price",
                      "enum": [
                        "price_list",
                        "online"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ParcelMachines": {
        "type": "array",
        "example": [
          {
            "id": 53,
            "reference": "EE90045",
            "name": "Automaat Valga Rimi",
            "carrier_name": "DPD Eesti AS",
            "carrier_id": 10,
            "carrier_reg_no": "10092256",
            "address_row_1": "Riia 18",
            "city": "Valga",
            "postcode": "68203",
            "country": "EE"
          },
          {
            "id": 2354,
            "reference": "96118",
            "name": "Antsla Coop Konsumi pakiautomaat",
            "carrier_name": "Eesti Post AS",
            "carrier_id": 267,
            "carrier_reg_no": "10328799",
            "address_row_1": "F. R. Kreutzwaldi tn 4a",
            "city": "Antsla vald",
            "postcode": "66404",
            "country": "EE"
          }
        ],
        "description": "an array containing objects of the found parcel machines",
        "items": {
          "type": "object",
          "description": "A parcel machine object detailing information about the parcel machine, such as its name, location, references and info about its carrier",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The numeric ID of this parcel machine"
            },
            "reference": {
              "type": "string",
              "description": "The reference of this parcel machine (as referenced to by the carrier)"
            },
            "name": {
              "type": "string",
              "description": "The name of this parcel machine"
            },
            "carrier_name": {
              "type": "string",
              "description": "The name of the carrier of this parcel machine"
            },
            "carrier_id": {
              "type": "integer",
              "description": "The numeric ID of the carrier of this parcel machine"
            },
            "carrier_reg_no": {
              "type": "string",
              "description": "The business registration number of the carrier of this parcel machine"
            },
            "address_row_1": {
              "type": "string",
              "description": "The street address of this parcel machine"
            },
            "city": {
              "type": "string",
              "description": "The name of the city of this parcel machine"
            },
            "postcode": {
              "type": "string",
              "description": "The postcode of this parcel machine"
            },
            "country": {
              "type": "string",
              "description": "The two-letter country code (ISO 3166-1 alpha-2) of this parcel machine"
            }
          }
        }
      },
      "Emissions": {
        "type": "object",
        "example": {
          "status": 200,
          "object": {
            "distances": {
              "coordinates": {
                "collection": [
                  "59.4211, 24.69927"
                ],
                "delivery": [
                  "50.62627, 3.06691"
                ]
              },
              "road": 2358.67,
              "sea": {
                "ship": 1880,
                "truck": 65
              },
              "gcd": 1680
            },
            "co2e_kg": {
              "road": "220.54",
              "sea": "37.78",
              "air": "2449.5",
              "rail": "99.49"
            }
          }
        },
        "properties": {
          "status": {
            "type": "integer",
            "description": "Status code"
          },
          "object": {
            "type": "object",
            "description": "an object containing shipment coordinates and co2e emissions",
            "properties": {
              "distances": {
                "type": "object",
                "description": "an object containing shipment coordinates and distances",
                "properties": {
                  "coordinates": {
                    "type": "object",
                    "description": "an object containing collection and delivery coordinates",
                    "properties": {
                      "collection": {
                        "type": "array",
                        "description": "Collection coordinates",
                        "items": {
                          "type": "number",
                          "description": "Latitude and longitude"
                        }
                      },
                      "delivery": {
                        "type": "array",
                        "description": "Delivery coordinates",
                        "items": {
                          "type": "number",
                          "description": "Latitude and longitude"
                        }
                      }
                    }
                  },
                  "road": {
                    "type": "number",
                    "description": "Road distance"
                  },
                  "sea": {
                    "type": "object",
                    "description": "Sea distance",
                    "properties": {
                      "ship": {
                        "type": "number",
                        "description": "Ship distance"
                      },
                      "truck": {
                        "type": "number",
                        "description": "Truck distance"
                      }
                    }
                  },
                  "gcd": {
                    "type": "number",
                    "description": "Great Circle distance"
                  }
                }
              },
              "co2e_kg": {
                "type": "object",
                "description": "Expected CO2e emissions for different freight types",
                "properties": {
                  "road": {
                    "type": "string",
                    "description": "Road CO2e emissions in kg"
                  },
                  "sea": {
                    "type": "string",
                    "description": "Sea CO2e emissions in kg"
                  },
                  "air": {
                    "type": "string",
                    "description": "Air CO2e emissions in kg"
                  },
                  "rail": {
                    "type": "string",
                    "description": "Rail CO2e emissions in kg"
                  }
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Token": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "Enter your token in the format **Token &lt;token>**"
      }
    }
  }
}
